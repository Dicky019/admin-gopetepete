generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Driver {
  id           String  @id @default(cuid())
  namaLengkap  String
  alamat       String
  nik          String
  nokk         String
  noHp         String
  noPlatMobil  String
  maxPenumpang Int
  fotoKtp      String
  fotoMobil    String
  user         User?
  rute         Rute?   @relation(fields: [ruteId], references: [id], onUpdate: Cascade)
  ruteId       String? 

  @@unique([noHp, noPlatMobil, nik])
  @@index([ruteId])
}

model Rute {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  kode      String
  color     String
  locations Location[]
  driver    Driver[]

  @@unique([kode, name])
}

model Location {
  id        String  @id @default(cuid())
  latAwal   String
  longAwal  String
  latAkhir  String
  longAkhir String
  rute      Rute?   @relation(fields: [ruteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ruteId    String?

  @@index([ruteId])
}

// Next-Auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  status        Boolean   @default(false)
  driver        Driver?   @relation(fields: [driverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  driverId      String?   @unique
  role          UserRole
  accounts      Account[]
  sessions      Session[]
}

enum UserRole {
  admin
  driver
  passenger
}
